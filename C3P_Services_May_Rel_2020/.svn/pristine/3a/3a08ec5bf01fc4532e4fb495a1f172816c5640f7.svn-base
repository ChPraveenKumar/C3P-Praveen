package com.techm.orion.rest;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.core.Response;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.techm.orion.dao.RequestInfoDao;
import com.techm.orion.entitybeans.RequestDetailsEntity;
import com.techm.orion.entitybeans.VendorDetails;
import com.techm.orion.models.BackUpRequestVersioningJSONModel;
import com.techm.orion.models.TemplateVersioningJSONModel;
import com.techm.orion.pojo.CreateConfigRequest;
import com.techm.orion.pojo.TemplateBasicConfigurationPojo;
import com.techm.orion.pojo.UserPojo;
import com.techm.orion.repositories.DeviceInterfaceRepo;
import com.techm.orion.repositories.InternetInfoRepo;
import com.techm.orion.repositories.RequestDetailsImportRepo;
import com.techm.orion.repositories.RouterVfRepo;
import com.techm.orion.repositories.VendorDetailsRepository;
import com.techm.orion.repositories.WebServiceRepo;
import com.techm.orion.service.BackupCurrentRouterConfigurationService;
import com.techm.orion.service.ErrorCodeValidationDeliveryTest;
import com.techm.orion.service.TemplateManagementDetailsService;
import com.techm.orion.utility.InvokeFtl;
import com.techm.orion.utility.TextReport;

@Controller
@RequestMapping("/BackUpConfigurationAndTest")
public class BackUpAndRestoreController {


	public static String TSA_PROPERTIES_FILE = "TSA.properties";
	public static final Properties TSA_PROPERTIES = new Properties();

	
	List<String> files = new ArrayList<String>();

	@Autowired
	public RequestDetailsImportRepo requestDetailsImportRepo;

	@Autowired
	public DeviceInterfaceRepo deviceInterfaceRepo;

	@Autowired
	public InternetInfoRepo internetInfoRepo;

	@Autowired
	public RouterVfRepo routerVfRepo;

	@Autowired
	public WebServiceRepo webServiceRepo;

	@Autowired
	public VendorDetailsRepository vendorDetailsRepo;

	@SuppressWarnings("unchecked")
	@POST
	@RequestMapping(value = "/getVendorCheck", method = RequestMethod.POST, produces = "application/json")
	@ResponseBody
	public Response getVendorStatus(@RequestBody String request) {

		JSONObject obj = new JSONObject();
		JSONParser parser = new JSONParser();
		String vendorCheck = null, str = null;
		List<VendorDetails> vendorList = new ArrayList<VendorDetails>();

		try {
			obj = (JSONObject) parser.parse(request);

			vendorCheck = obj.get("Vendor").toString();

			vendorList = vendorDetailsRepo.findByVendor(vendorCheck);

			for (int i = 0; i < vendorList.size(); i++) {

				if (vendorList.get(i).getVendor().contains(vendorCheck)) {
					str = "true";
				}

			}

			if (vendorList.isEmpty()) {
				str = "false";
			}

		} catch (Exception e) {
			System.out.println(e);
		}

		return Response.status(200).entity(str).build();
	}

	@SuppressWarnings("unchecked")
	@POST
	@RequestMapping(value = "/getManagementIP", method = RequestMethod.POST, produces = "application/json")
	@ResponseBody
	public Response getManagementIP(@RequestBody String request) {

		JSONObject obj = new JSONObject();
		JSONParser parser = new JSONParser();
		String hostName = null, str = null;

		List<RequestDetailsEntity> hostNameList = new ArrayList<RequestDetailsEntity>();

		try {
			obj = (JSONObject) parser.parse(request);

			hostName = obj.get("Hostname").toString();

			hostNameList = requestDetailsImportRepo.findByHostname(hostName);

			for (int i = 0; i < hostNameList.size(); i++) {

				if (hostNameList.get(i).getHostname().contains(hostName)) {
					str = hostName;
				}

			}

			if (hostNameList.isEmpty()) {
				str = "This hostName is not supported. Please contact system admin";
			}

		} catch (Exception e) {
			System.out.println(e);
		}

		return Response.status(200).entity(str).build();
	}
	
	@SuppressWarnings("unchecked")
	@POST
	@RequestMapping(value = "/getBackUpSRList", method = RequestMethod.GET, produces = "application/json")
	@ResponseBody
	public Response getBackUpSRList() {

		JSONObject obj = new JSONObject();
		String jsonArray = "";
		RequestDetailsEntity service = new RequestDetailsEntity();
		List<RequestDetailsEntity> list = new ArrayList<RequestDetailsEntity>();

		try {
			JSONParser parser = new JSONParser();
			List<BackUpRequestVersioningJSONModel> versioningModel = new ArrayList<BackUpRequestVersioningJSONModel>();
			List<RequestDetailsEntity> versioningModelChildList = new ArrayList<RequestDetailsEntity>();
			RequestDetailsEntity objToAdd = null;
			BackUpRequestVersioningJSONModel versioningModelObject = null;
			list = requestDetailsImportRepo.findAll();
			// create treeview json
			for (int i = 0; i < list.size(); i++) {
				boolean objectPrsent = false;
				if (versioningModel.size() > 0) {
					for (int j = 0; j < versioningModel.size(); j++) {
						if (versioningModel.get(j).getHostname()
								.equalsIgnoreCase(list.get(i).getHostname())) {
							objectPrsent = true;
							break;
						}
					}
				}
				
				objToAdd = list.get(i);
				String backUpRequestCheck = objToAdd.getAlphanumericReqId().substring(0, 2);
				
				
				if (objectPrsent == false && backUpRequestCheck.contains("BR")) {
					versioningModelObject = new BackUpRequestVersioningJSONModel();
					objToAdd = new RequestDetailsEntity();
					objToAdd = list.get(i);
					versioningModelObject.setHostname(objToAdd
							.getHostname());
					versioningModelObject.setRequestinfoid(objToAdd
							.getRequestinfoid());
					
					versioningModelObject.setAlphanumericReqId(objToAdd
							.getAlphanumericReqId());
					
					versioningModelObject.setVendor(objToAdd.getVendor());
					
					versioningModelObject.setModel(objToAdd.getModel());
					
					versioningModelObject.setManagementIp(objToAdd
							.getManagementIp());
					versioningModelObject.setModel(objToAdd.getModel());
					
					versioningModelObject.setDate_of_processing(objToAdd.getDate_of_processing());
					versioningModelObject.setRequeststatus(objToAdd.getRequeststatus());
					versioningModelObject.setRequest_creator_name(objToAdd.getRequest_creator_name());
					
					versioningModelChildList = new ArrayList<RequestDetailsEntity>();
					for (int k = 0; k < list.size(); k++) {
						if (list.get(k)
								.getHostname()
								.equalsIgnoreCase(
										versioningModelObject.getHostname())) {
							versioningModelChildList.add(list.get(k));
						}
					}
					Collections.reverse(versioningModelChildList);
					
					versioningModelChildList.get(0).setEditable(true);
					versioningModelObject
							.setChildList(versioningModelChildList);
					versioningModel.add(versioningModelObject);

				}

			}

			jsonArray = new Gson().toJson(versioningModel);
			obj.put(new String("output"), jsonArray);

		} catch (Exception e) {
			System.out.println(e);
		}

		return Response
				.status(200)
				.header("Access-Control-Allow-Origin", "*")
				.header("Access-Control-Allow-Headers",
						"origin, content-type, accept, authorization")
				.header("Access-Control-Allow-Credentials", "true")
				.header("Access-Control-Allow-Methods",
						"GET, POST, PUT, DELETE, OPTIONS, HEAD")
				.header("Access-Control-Max-Age", "1209600").entity(obj)
				.build();

	}
	
	
	
	

}
