package com.techm.orion.rest;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.ws.rs.POST;
import javax.ws.rs.core.Response;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.techm.orion.dao.RequestInfoDao;
import com.techm.orion.pojo.CertificationTestPojo;
import com.techm.orion.pojo.ReoprtFlags;
import com.techm.orion.pojo.RequestInfoSO;
import com.techm.orion.pojo.SearchParamPojo;

@Controller
@RequestMapping("/SearchRequestServiceWithVersion")
public class SearchRequestServiceWithVersion implements Observer {

    RequestInfoDao requestInfoDao = new RequestInfoDao();

    @POST
    @RequestMapping(value = "/search", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
    @ResponseBody
    public Response search(@RequestBody String searchParameters) {

	JSONObject obj = new JSONObject();
	String jsonMessage = "";
	String jsonArray = "";
	String jsonArrayReports="";
	String key = null, value = null, version=null;
	List<ReoprtFlags> reoportflagllist=new ArrayList<ReoprtFlags>();
	List<CertificationTestPojo> testList=new ArrayList<CertificationTestPojo>();
	List<ReoprtFlags> reoportflagllistforselectedRecord=new ArrayList<ReoprtFlags>();
	List<RequestInfoSO> testListforselectedRecord=new ArrayList<RequestInfoSO>();
	
	JSONObject jsonobjectForTest=null;
	ReoprtFlags selected;
	RequestInfoSO tests;
	RequestInfoDao dao=new RequestInfoDao();
	try {
		JSONArray jsonArrayForTest=new JSONArray();
		
		JSONParser parser = new JSONParser();
	    JSONObject inputjson = (JSONObject) parser.parse(searchParameters);
	    JSONObject dilevaryMilestonesforOSupgrade=new JSONObject();
	    Gson gson = new Gson();
	    SearchParamPojo dto = gson.fromJson(searchParameters,
		    SearchParamPojo.class);
	    key = dto.getKey();
	    value = dto.getValue();
	    version=dto.getVersion();
	    
	    if(inputjson.get("readFlag")!=null)
	    {
	    	Float v=Float.parseFloat(version);
			DecimalFormat df = new DecimalFormat("0.0");
			df.setMaximumFractionDigits(1);
			String versionSEFE = df.format(v);
	    	if(inputjson.get("readFlag").toString().equalsIgnoreCase("1"))
	    	{ 
	    		dao.setReadFlagFESE(value, versionSEFE, 1, "SE");
	    	}
	    	else
	    	{
	    		dao.setReadFlagFESE(value, versionSEFE, 0, "SE");

	    	}
	    }
	    List<RequestInfoSO> detailsList = new ArrayList<RequestInfoSO>();
	    List<RequestInfoSO> certificationBit = new ArrayList<RequestInfoSO>();
	    if (value != null && !value.isEmpty()) {
		try {
		    // quick fix for json not getting serialized

		    detailsList = requestInfoDao.searchRequestsFromDBWithVersion(key,
			    value,version);
		    reoportflagllist=requestInfoDao.getReportsInfoForAllRequestsDB();
		    certificationBit=requestInfoDao.getCertificationtestvalidation(value);
		    String type = value.substring(0, Math.min(value.length(), 2));
		    if(type.equalsIgnoreCase("OS"))
		    {
		    	Float v=Float.parseFloat(version);
				DecimalFormat df = new DecimalFormat("0.0");
				df.setMaximumFractionDigits(1);
				String version_decimal = df.format(v);
		    	dilevaryMilestonesforOSupgrade=requestInfoDao.get_dilevary_steps_status(value,version_decimal);
		    }
		    else
		    {
		    	//dilevary milestones will be null
		    }
		    if(detailsList.size()>0)
		    {
		    for(int i=0; i<reoportflagllist.size();i++)
		    {
			if(reoportflagllist.get(i).getRequestId().equalsIgnoreCase(Integer.toString(detailsList.get(0).getRequest_id())))
			{
			    selected=new ReoprtFlags();
			    selected=reoportflagllist.get(i);
			    reoportflagllistforselectedRecord.add(selected);
			}
		    }
		    }
		    if(detailsList.size()>0)
		    {
		    for(int i=0; i<certificationBit.size();i++)
		    {
			if(certificationBit.get(i).getRequest_id()==detailsList.get(0).getRequest_id())
			{
				tests=new RequestInfoSO();
				tests=certificationBit.get(i);
				testListforselectedRecord.add(tests);
			}
		    }
		    }
		    for(int i=0;i<testListforselectedRecord.size();i++)
		    {
		    	
		    	String bitCount=testListforselectedRecord.get(i).getCertificationSelectionBit();
		    	
		    	if(bitCount.charAt(0)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Interfaces status");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Interfaces status");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	
		    	if(bitCount.charAt(1)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "WAN Interface");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "WAN Interface");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	if(bitCount.charAt(2)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Platform & IOS");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Platform & IOS");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	
		    	if(bitCount.charAt(3)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "BGP neighbor");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "BGP neighbor");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	if(bitCount.charAt(4)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Throughput");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Throughput");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	
		    	if(bitCount.charAt(5)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "FrameLoss");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "FrameLoss");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	if(bitCount.charAt(6)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Latency");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Latency");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	
		    	
		    	
		    }
		    //Logic for setting flags
	    	JSONObject interfaceandroutingobject=new JSONObject();
		    if(detailsList.size() == 1)
		    {
		    	RequestInfoSO so=new RequestInfoSO();
		    	so=detailsList.get(0);
		    	if(so.getLoopbackIPaddress()!=null && !so.getLoopbackIPaddress().isEmpty() && so.getLoopBackType()!=null && !so.getLoopBackType().isEmpty() && so.getLoopbackSubnetMask()!=null && !so.getLoopbackSubnetMask().isEmpty())
		    	{
		    		interfaceandroutingobject.put("loopbackFlags", true);
		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("loopbackFlags", false);

		    	}
		    	
		    	if(so.getBanner()!=null && !so.getBanner().isEmpty())
		    	{
		    		interfaceandroutingobject.put("bannerFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("bannerFlag", false);

		    	}
		    	if(so.getVrfName()!=null && !so.getVrfName().isEmpty())
		    	{
		    		interfaceandroutingobject.put("vrfFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("vrfFlag", false);

		    	}
		    	if(so.getEnablePassword()!=null && !so.getEnablePassword().isEmpty())
		    	{
		    		interfaceandroutingobject.put("enablePasswordFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("enablePasswordFlag", false);

		    	}
		    	if(so.getSnmpString()!=null && !so.getSnmpString().isEmpty() && so.getSnmpHostAddress()!=null && !so.getSnmpHostAddress().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("snmpFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("snmpFlags", false);

		    	}
		    
		    	if(so.getInternetLcVrf().getRoutingProtocol()!=null && !so.getInternetLcVrf().getRoutingProtocol().isEmpty() && so.getInternetLcVrf().getBgpASNumber()!=null && !so.getInternetLcVrf().getBgpASNumber().isEmpty() && so.getInternetLcVrf().getNetworkIp()!=null && !so.getInternetLcVrf().getNetworkIp().isEmpty() && so.getInternetLcVrf().getNetworkIp_subnetMask()!=null && !so.getInternetLcVrf().getNetworkIp_subnetMask().isEmpty() && so.getInternetLcVrf().getNeighbor1()!=null && !so.getInternetLcVrf().getNeighbor1().isEmpty() && so.getInternetLcVrf().getNeighbor2()!=null && !so.getInternetLcVrf().getNeighbor2().isEmpty() && so.getInternetLcVrf().getNeighbor1_remoteAS()!=null && !so.getInternetLcVrf().getNeighbor1_remoteAS().isEmpty() && so.getInternetLcVrf().getNeighbor2_remoteAS()!=null && !so.getInternetLcVrf().getNeighbor2_remoteAS().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("routingProtocolFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("routingProtocolFlag", false);

		    	}
		    	
		    	if(so.getDeviceInterfaceSO().getName()!=null && !so.getDeviceInterfaceSO().getName().isEmpty())
		    	{
		    		if(so.getDeviceInterfaceSO().getBandwidth()!=null && !so.getDeviceInterfaceSO().getBandwidth().isEmpty())
		    		{
			    		interfaceandroutingobject.put("bandwidthFlag", true);

		    		}
		    		else
		    		{
			    		interfaceandroutingobject.put("bandwidthFlag", false);

		    		}
		    		if(so.getDeviceInterfaceSO().getSpeed()!=null && !so.getDeviceInterfaceSO().getSpeed().isEmpty())
		    		{
			    		interfaceandroutingobject.put("speedFlag", true);

		    		}
		    		else
		    		{
			    		interfaceandroutingobject.put("speedFlag", false);

		    		}
		    		interfaceandroutingobject.put("wanFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("wanFlags", false);

		    	}
		    	/*if(so.getLoopbackIPaddress()!=null && !so.getLoopbackIPaddress().isEmpty() && so.getLoopbackSubnetMask()!=null && !so.getLoopbackSubnetMask().isEmpty())
		    	{
		    		interfaceandroutingobject.put("lanInterfaceFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("lanInterfaceFlags", false);

		    	}
		    	*/
		    	if(so.getLanInterface()!=null && !so.getLanInterface().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("lanFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("lanFlags", false);

		    	}
		    	
		    }
		    
		    
		    
		    jsonArrayReports=new Gson().toJson(reoportflagllistforselectedRecord);
		    String test=new Gson().toJson(jsonArrayForTest);
		    jsonArray = new Gson().toJson(detailsList);
		    obj.put(new String("output"), jsonArray);
		    obj.put("flags", interfaceandroutingobject);
		    obj.put(new String("ReportStatus"), jsonArrayReports);
		    obj.put(new String("certificationOptionList"), test);
		    obj.put(new String("DilevaryMilestones"),dilevaryMilestonesforOSupgrade);
		    
		} catch (Exception e) {
		    System.out.println(e);
		}
	    } else {
		try {
		    detailsList = requestInfoDao.getAllResquestsFromDB();
		    jsonArray = new Gson().toJson(detailsList);
		    obj.put(new String("output"), jsonArray);
		} catch (Exception e) {
		    System.out.print(e);
		}
	    }
	} catch (Exception e) {
	    System.out.println(e);
	}

	return Response
		.status(200)
		.header("Access-Control-Allow-Origin", "*")
		.header("Access-Control-Allow-Headers",
			"origin, content-type, accept, authorization")
		.header("Access-Control-Allow-Credentials", "true")
		.header("Access-Control-Allow-Methods",
			"GET, POST, PUT, DELETE, OPTIONS, HEAD")
		.header("Access-Control-Max-Age", "1209600").entity(obj)
		.build();
    }
   
    /*
	 * Owner: Rahul Tiwari Module: GLM Logic: To refresh only milestone not entire page
	 * custom tests
	 */
    @POST
    @RequestMapping(value = "/refreshmilestones", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
    @ResponseBody
    public Response refreshmilestones(@RequestBody String searchParameters) {

	JSONObject obj = new JSONObject();
	String jsonMessage = "";
	String jsonArray = "";
	String jsonArrayReports="";
	String key = null, value = null, version=null;
	List<ReoprtFlags> reoportflagllist=new ArrayList<ReoprtFlags>();
	List<CertificationTestPojo> testList=new ArrayList<CertificationTestPojo>();
	List<ReoprtFlags> reoportflagllistforselectedRecord=new ArrayList<ReoprtFlags>();
	List<RequestInfoSO> testListforselectedRecord=new ArrayList<RequestInfoSO>();
	
	JSONObject jsonobjectForTest=null;
	ReoprtFlags selected;
	RequestInfoSO tests;
	RequestInfoDao dao=new RequestInfoDao();
	try {
		JSONArray jsonArrayForTest=new JSONArray();
		
		JSONParser parser = new JSONParser();
	    JSONObject inputjson = (JSONObject) parser.parse(searchParameters);
	    JSONObject dilevaryMilestonesforOSupgrade=new JSONObject();
	    Gson gson = new Gson();
	    SearchParamPojo dto = gson.fromJson(searchParameters,
		    SearchParamPojo.class);
	    key = dto.getKey();
	    value = dto.getValue();
	    version=dto.getVersion();
	    
	    if(inputjson.get("readFlag")!=null)
	    {
	    	Float v=Float.parseFloat(version);
			DecimalFormat df = new DecimalFormat("0.0");
			df.setMaximumFractionDigits(1);
			String versionSEFE = df.format(v);
	    	if(inputjson.get("readFlag").toString().equalsIgnoreCase("1"))
	    	{ 
	    		dao.setReadFlagFESE(value, versionSEFE, 1, "SE");
	    	}
	    	else
	    	{
	    		dao.setReadFlagFESE(value, versionSEFE, 0, "SE");

	    	}
	    }
	    List<RequestInfoSO> detailsList = new ArrayList<RequestInfoSO>();
	    List<RequestInfoSO> certificationBit = new ArrayList<RequestInfoSO>();
	    if (value != null && !value.isEmpty()) {
		try {
		    // quick fix for json not getting serialized

		    detailsList = requestInfoDao.searchRequestsFromDBWithVersion(key,
			    value,version);
		    reoportflagllist=requestInfoDao.getReportsInfoForAllRequestsDB();
		    certificationBit=requestInfoDao.getCertificationtestvalidation(value);
		    String type = value.substring(0, Math.min(value.length(), 2));
		    if(type.equalsIgnoreCase("OS"))
		    {
		    	Float v=Float.parseFloat(version);
				DecimalFormat df = new DecimalFormat("0.0");
				df.setMaximumFractionDigits(1);
				String version_decimal = df.format(v);
		    	dilevaryMilestonesforOSupgrade=requestInfoDao.get_dilevary_steps_status(value,version_decimal);
		    }
		    else
		    {
		    	//dilevary milestones will be null
		    }
		    if(detailsList.size()>0)
		    {
		    for(int i=0; i<reoportflagllist.size();i++)
		    {
			if(reoportflagllist.get(i).getRequestId().equalsIgnoreCase(Integer.toString(detailsList.get(0).getRequest_id())))
			{
			    selected=new ReoprtFlags();
			    selected=reoportflagllist.get(i);
			    reoportflagllistforselectedRecord.add(selected);
			}
		    }
		    }
		    if(detailsList.size()>0)
		    {
		    for(int i=0; i<certificationBit.size();i++)
		    {
			if(certificationBit.get(i).getRequest_id()==detailsList.get(0).getRequest_id())
			{
				tests=new RequestInfoSO();
				tests=certificationBit.get(i);
				testListforselectedRecord.add(tests);
			}
		    }
		    }
		    for(int i=0;i<testListforselectedRecord.size();i++)
		    {
		    	
		    	String bitCount=testListforselectedRecord.get(i).getCertificationSelectionBit();
		    	
		    	if(bitCount.charAt(0)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Interfaces status");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Interfaces status");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	
		    	if(bitCount.charAt(1)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "WAN Interface");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "WAN Interface");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	if(bitCount.charAt(2)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Platform & IOS");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Platform & IOS");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	
		    	if(bitCount.charAt(3)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "BGP neighbor");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "BGP neighbor");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    		
		    	}
		    	if(bitCount.charAt(4)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Throughput");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Throughput");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	
		    	if(bitCount.charAt(5)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "FrameLoss");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "FrameLoss");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	if(bitCount.charAt(6)=='1')
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Latency");
		    		jsonobjectForTest.put("selected", true);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}
		    	else
		    	{
		    		jsonobjectForTest=new JSONObject();
		    		jsonobjectForTest.put("value", "Latency");
		    		jsonobjectForTest.put("selected", false);
		    		jsonArrayForTest.add(jsonobjectForTest);
		    	}		    			    	
		    	
		    }
		    //Logic for setting flags
	    	JSONObject interfaceandroutingobject=new JSONObject();
		    if(detailsList.size() == 1)
		    {
		    	RequestInfoSO so=new RequestInfoSO();
		    	so=detailsList.get(0);
		    	if(so.getLoopbackIPaddress()!=null && !so.getLoopbackIPaddress().isEmpty() && so.getLoopBackType()!=null && !so.getLoopBackType().isEmpty() && so.getLoopbackSubnetMask()!=null && !so.getLoopbackSubnetMask().isEmpty())
		    	{
		    		interfaceandroutingobject.put("loopbackFlags", true);
		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("loopbackFlags", false);

		    	}
		    	
		    	if(so.getBanner()!=null && !so.getBanner().isEmpty())
		    	{
		    		interfaceandroutingobject.put("bannerFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("bannerFlag", false);

		    	}
		    	if(so.getVrfName()!=null && !so.getVrfName().isEmpty())
		    	{
		    		interfaceandroutingobject.put("vrfFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("vrfFlag", false);

		    	}
		    	if(so.getEnablePassword()!=null && !so.getEnablePassword().isEmpty())
		    	{
		    		interfaceandroutingobject.put("enablePasswordFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("enablePasswordFlag", false);

		    	}
		    	if(so.getSnmpString()!=null && !so.getSnmpString().isEmpty() && so.getSnmpHostAddress()!=null && !so.getSnmpHostAddress().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("snmpFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("snmpFlags", false);

		    	}
		    
		    	if(so.getInternetLcVrf().getRoutingProtocol()!=null && !so.getInternetLcVrf().getRoutingProtocol().isEmpty() && so.getInternetLcVrf().getBgpASNumber()!=null && !so.getInternetLcVrf().getBgpASNumber().isEmpty() && so.getInternetLcVrf().getNetworkIp()!=null && !so.getInternetLcVrf().getNetworkIp().isEmpty() && so.getInternetLcVrf().getNetworkIp_subnetMask()!=null && !so.getInternetLcVrf().getNetworkIp_subnetMask().isEmpty() && so.getInternetLcVrf().getNeighbor1()!=null && !so.getInternetLcVrf().getNeighbor1().isEmpty() && so.getInternetLcVrf().getNeighbor2()!=null && !so.getInternetLcVrf().getNeighbor2().isEmpty() && so.getInternetLcVrf().getNeighbor1_remoteAS()!=null && !so.getInternetLcVrf().getNeighbor1_remoteAS().isEmpty() && so.getInternetLcVrf().getNeighbor2_remoteAS()!=null && !so.getInternetLcVrf().getNeighbor2_remoteAS().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("routingProtocolFlag", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("routingProtocolFlag", false);

		    	}
		    	
		    	if(so.getDeviceInterfaceSO().getName()!=null && !so.getDeviceInterfaceSO().getName().isEmpty())
		    	{
		    		if(so.getDeviceInterfaceSO().getBandwidth()!=null && !so.getDeviceInterfaceSO().getBandwidth().isEmpty())
		    		{
			    		interfaceandroutingobject.put("bandwidthFlag", true);

		    		}
		    		else
		    		{
			    		interfaceandroutingobject.put("bandwidthFlag", false);

		    		}
		    		if(so.getDeviceInterfaceSO().getSpeed()!=null && !so.getDeviceInterfaceSO().getSpeed().isEmpty())
		    		{
			    		interfaceandroutingobject.put("speedFlag", true);

		    		}
		    		else
		    		{
			    		interfaceandroutingobject.put("speedFlag", false);

		    		}
		    		interfaceandroutingobject.put("wanFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("wanFlags", false);

		    	}
		    	/*if(so.getLoopbackIPaddress()!=null && !so.getLoopbackIPaddress().isEmpty() && so.getLoopbackSubnetMask()!=null && !so.getLoopbackSubnetMask().isEmpty())
		    	{
		    		interfaceandroutingobject.put("lanInterfaceFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("lanInterfaceFlags", false);

		    	}
		    	*/
		    	if(so.getLanInterface()!=null && !so.getLanInterface().isEmpty() )
		    	{
		    		interfaceandroutingobject.put("lanFlags", true);

		    	}
		    	else
		    	{
		    		interfaceandroutingobject.put("lanFlags", false);

		    	}
		    	
		    }
		    		    
		    jsonArrayReports=new Gson().toJson(reoportflagllistforselectedRecord);
		    String test=new Gson().toJson(jsonArrayForTest);
		    
		    jsonArray = new Gson().toJson(detailsList.iterator().next().getStatus().toString());
		    obj.put(new String("status"), jsonArray.replaceAll("^\"|\"$", ""));
		    if(detailsList.iterator().next().getScheduledTime() != null)
		    {
		    	jsonArray = new Gson().toJson(detailsList.iterator().next().getScheduledTime().toString());
			    obj.put(new String("scheduleTime"), jsonArray.replaceAll("^\"|\"$", "").replaceAll("\\\\", ""));
		    }   
		    if(detailsList.iterator().next().getElapsedTime() != null)
		    {
		    	jsonArray = new Gson().toJson(detailsList.iterator().next().getElapsedTime().toString());
			    obj.put(new String("elapsedTime"), jsonArray.replaceAll("^\"|\"$", ""));
			    
		    }    
		    //obj.put("flags", interfaceandroutingobject);
		    obj.put(new String("ReportStatus"), jsonArrayReports);
		    obj.put(new String("certificationOptionList"), test);
		    obj.put(new String("DilevaryMilestones"),dilevaryMilestonesforOSupgrade);
		    
		} catch (Exception e) {
		    System.out.println(e.getMessage());
		}
	    } else {
		try {
		    detailsList = requestInfoDao.getAllResquestsFromDB();
		    jsonArray = new Gson().toJson(detailsList);
		    obj.put(new String("output"), jsonArray);
		} catch (Exception e) {
		    System.out.print(e);
		}
	    }
	} catch (Exception e) {
	    System.out.println(e);
	}

	return Response
		.status(200)
		.header("Access-Control-Allow-Origin", "*")
		.header("Access-Control-Allow-Headers",
			"origin, content-type, accept, authorization")
		.header("Access-Control-Allow-Credentials", "true")
		.header("Access-Control-Allow-Methods",
			"GET, POST, PUT, DELETE, OPTIONS, HEAD")
		.header("Access-Control-Max-Age", "1209600").entity(obj)
		.build();
    }

    @Override
    public void update(Observable o, Object arg) {
	// TODO Auto-generated method stub

    }

}
